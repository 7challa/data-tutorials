

<div class="tutorial-content">
  <h1 id="lab-2-enhance-the-dataflow-with-geo-location-enrichment">Lab 2: Enhance the DataFlow with Geo Location Enrichment</h1>

<h2 id="introduction">Introduction</h2>

<p>In this section, you will build a geographic location enrichment for the vehicle filtering dataflow. You will obtain a deep understanding of the automated and managed flow of information between multiple systems and the facilities in NiFi for monitoring and examining the dataflow. To add this enhancement, we will incorporate Google Places Nearby API with NiFi, which will show the neighborhoods nearby the vehicle’s location as it moves. This incorporation of external API’s is a feasible design pattern because NiFi makes it easy to bring in other technologies to process the data.</p>

<h2 id="pre-requisites">Pre-Requisites</h2>
<ul>
  <li>Completed Lab 0: Download, Install and Start NiFi</li>
  <li>Completed Lab 1: Build A Simple NiFi DataFlow</li>
</ul>

<h2 id="outline">Outline</h2>
<ul>
  <li>Google Places API</li>
  <li>Step 1: Obtain API Key for NiFi to Build HTTP URL</li>
  <li>Step 2: Build Geo Location Enrichment DataFlow Section</li>
  <li>Step 3: Run NiFi DataFlow</li>
  <li>Summary</li>
  <li>Further Reading</li>
</ul>

<h2 id="google-places-api">Google Places API</h2>

<p>Google Places API Web Service returns info about places: establishments, geographic locations and prominent points of interest using HTTP requests. The Places API includes six place requests: Place Searches, Place Details, Place Add, Place Photos, Place Autocomplete and Query Autocomplete. Read more about these place requests in <a href="https://developers.google.com/places/web-service/intro">Introducing the API</a>.</p>

<p>All requests are accessed through an HTTP request and return either JSON or XML response.</p>

<p>What are the necessary components to use the Places API?
- https:// protocol
- API Key</p>

<h3 id="step-1-obtain-api-key-for-nifi-to-build-http-url">Step 1: Obtain API Key for NiFi to Build HTTP URL</h3>

<p>For our dataflow, our task is to enrich the data by searching for neighborhoods within proximity of a vehicle’s varying location. We will retrieve two parameters from this data: name of the neighborhoods and San Francisco Muni Transit Agency. So, we will integrate Nearby Search HTTP request with NiFi.</p>

<p>The Nearby Search request is an HTTP URL of the following definition, which we will need for NiFi:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>https://maps.googleapis.com/maps/api/place/nearbysearch/output?parameters
</code></pre>
</div>

<p>The <code class="highlighter-rouge">output</code> can come in two formats: <code class="highlighter-rouge">json</code> or <code class="highlighter-rouge">xml</code>. We will use json for this lab.</p>

<p>Let’s obtain the <strong>required parameters</strong> to initiate a Nearby Search request.</p>

<p>1. We will need to <a href="https://developers.google.com/places/web-service/get-api-key">obtain an API key</a>, so it can identify our application for quota management and places added from the application are instantly available to our app (NiFi).</p>

<p>2. We will use a standard Google Places API. Click on the blue <strong>Get A Key</strong> button to activate the API Web Service.</p>

<p>3. A window will appear that says <strong>Select a project where your application will be registered</strong>. In the dropdown menu, you should have <code class="highlighter-rouge">Create a new project</code> as the option. We will create a project for this application. Click on <strong>Continue</strong>. Wait a few seconds for the new window to load.</p>

<p>4. A screen with <strong>Server key 1</strong> in the Name field will appear, click on the blue <strong>Create</strong> button.</p>

<p>5. Now a screen with your unique API key in a table will appear similar to the Table below:</p>

<p><strong>Table 1: Example of the API Key Table</strong></p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Creation date</th>
      <th>Type</th>
      <th>Key</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Server Key 1</td>
      <td>June 14, 2016</td>
      <td>Server</td>
      <td>AIzaSyDY3asGAq-ArtPl6J2v7kcO_YSRYrjTFug</td>
    </tr>
  </tbody>
</table>

<p>Now we have the API Key parameter for our HTTP request. We also have the other required parameters: <strong>location</strong> thanks to lab 1 in which we extracted longitude &amp; latitude attributes and <strong>radius</strong>, which can be a distance that does not surpass 50,000 meters. We will use one optional parameter <strong>type</strong> to signify what type of place we are interested in searching for.</p>

<p>6. Let’s build our HTTP URL with the parameters below, so we can insert the URL as a property value into <strong>InvokeHTTP</strong> later in the lab.
- API Key = AIzaSyDY3asGAq-ArtPl6J2v7kcO_YSRYrjTFug
- Latitude = ${Latitude}
- Longitude = ${Longitude}
- radius = 500
- type = neighborhood</p>

<div class="highlighter-rouge"><pre class="highlight"><code>https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${Latitude},${Longitude}&amp;radius=500&amp;type=neighborhood&amp;key=AIzaSyDY3asGAq-ArtPl6J2v7kcO_YSRYrjTFug
</code></pre>
</div>

<h3 id="step-2-build-geo-location-enrichment-dataflow-section">Step 2: Build Geo Location Enrichment DataFlow Section</h3>

<p>Six processors are needed to add geographic location enrichment to your dataflow. Each processor holds a critical role in transporting the enriched data to a destination:</p>

<p><strong>InvokeHTTP</strong> performs an HTTP request to access data from Google Places API about places nearby a vehicle’s location
<strong>EvaluateJsonPath</strong> extract neighborhoods_nearby and city data elements out of JSON structure
<strong>RouteOnAttribute</strong> routes FlowFiles as long as their neighborhoods_nearby and city attributes do not contain empty strings
<strong>AttributesToJSON</strong> represents the enriched attributes in JSON structure
<strong>MergeContent</strong> merges FlowFiles together by concatenating their JSON content together
<strong>PutFile</strong> writes the enriched geographic location contents of the FlowFile to the local file system</p>

<h3 id="learning-objectives-dataflow-geo-enrichment-addition">2.1 Learning Objectives: DataFlow Geo Enrichment Addition</h3>
<ul>
  <li>Add/Configure/Connect processors to ingest, filter and store geo enriched API data</li>
  <li>Troubleshoot problems that may occur</li>
  <li>Run the dataflow</li>
</ul>

<h3 id="invokehttp">InvokeHTTP</h3>

<p>1. Add the InvokeHTTP processor onto the NiFi graph. Connect <strong>RouteOnAttribute</strong> from lab1 to <strong>InvokeHTTP</strong> processor. When the Create Connection window appears, verify <strong>Filter Attributes</strong> checkbox is checked, if not check it. Click <strong>Add</strong>.</p>

<p>2. Open InvokeHTTP configure properties tab and add the property listed in Table 1.</p>

<p>Table 1: Update InvokeHTTP Property Value(s)</p>

<table>
  <thead>
    <tr>
      <th>Property</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Remote URL</td>
      <td><code class="highlighter-rouge">https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${Latitude},${Longitude}&amp;radius=500&amp;type=neighborhood&amp;key=AIzaSyDY3asGAq-ArtPl6J2v7kcO_YSRYrjTFug</code></td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/learning-ropes-nifi-lab-series/lab2-geo-location-enrichment-nifi-lab-series/invokeHTTP_config_property_tab_window.png" alt="invokeHTTP_config_property_tab_window" /></p>

<p>3. Navigate to the <strong>Settings</strong> tab, change the name from InvokeHTTP to <code class="highlighter-rouge">GoogleNearbySearchAPI</code>. Under Auto terminate relationships check the <strong>Failure</strong>, <strong>No Retry</strong>, <strong>Original</strong> and <strong>Retry</strong> checkboxes. Click <strong>Apply</strong> button.</p>

<h3 id="evaluatejsonpath">EvaluateJsonPath</h3>

<p>1. Add the EvaluateJsonPath processor onto the NiFi graph. Connect InvokeHTTP to EvaluateJsonPath processor. When the Create Connection window appears, select <strong>Response</strong> checkbox. Click Apply.</p>

<p>2\ Open EvaluateJsonPath configure properties tab and update the original properties with the properties listed in Table 2. Note: add <code class="highlighter-rouge">city</code> and <code class="highlighter-rouge">neighborhoods_nearby</code> property by clicking the <strong>New property</strong> button, then insert their values into the properties tab.</p>

<p>Table 2: Update and Add New EvaluateJsonPath Property Values</p>

<table>
  <thead>
    <tr>
      <th>Property</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Destination</td>
      <td>flowfile-attribute</td>
    </tr>
    <tr>
      <td>Return Type</td>
      <td>json</td>
    </tr>
    <tr>
      <td>city</td>
      <td><code class="highlighter-rouge">$.results[0].vicinity</code></td>
    </tr>
    <tr>
      <td>Destination</td>
      <td><code class="highlighter-rouge">$.results[*].name</code></td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/learning-ropes-nifi-lab-series/lab2-geo-location-enrichment-nifi-lab-series/evaluateJsonPath_config_property_tab_window.png" alt="evaluateJsonPath_config_property_tab_window" /></p>

<p>3. Navigate to the <strong>Settings</strong> tab. Under Auto terminate relationships check the <strong>unmatched</strong> checkbox. Click <strong>Apply</strong> button. Hover over the processor, the circle with a plus symbol appears, create a connection of the processor to itself. When the Create Connection window opens, check <strong>failure</strong> relationship.</p>

<h3 id="routeonattribute">RouteOnAttribute</h3>

<p>1. Add the EvaluateJsonPath processor onto the NiFi graph. Connect EvaluateJsonPath to RouteOnAttribute processor. When the Create Connection window appears, select <strong>matched</strong> checkbox. Click Apply.</p>

<p>2. Open RouteOnAttribute configure properties tab and click on <strong>New property</strong> button to add <code class="highlighter-rouge">RouteNearbyNeighborhoods</code> to property name and insert its NiFi expression value listed in Table 3.</p>

<p>Table 3: Add New RouteOnAttribute Property Value</p>

<table>
  <thead>
    <tr>
      <th>Property</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>RouteNearbyNeighborhoods</td>
      <td><code class="highlighter-rouge">${city:isEmpty():not():and(${neighborhoods_nearby:isEmpty():not()})}</code></td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/learning-ropes-nifi-lab-series/lab2-geo-location-enrichment-nifi-lab-series/routeOnAttribute_geoEnrich_config_property_tab_window.png" alt="routeOnAttribute_geoEnrich_config_property_tab_window" /></p>

<p>3. Navigate to the <strong>Settings</strong> tab, change the name from RouteOnAttribute to <code class="highlighter-rouge">RouteNearbyNeighborhoods</code>. Under Auto terminate relationships check the <strong>unmatched</strong> checkbox. Click <strong>Apply</strong> button.</p>

<h3 id="attributestojson">AttributesToJSON</h3>

<p>1. Add the EvaluateJsonPath processor onto the NiFi graph. Connect RouteOnAttribute to AttributesToJSON processor. When the Create Connection window appears, select <strong>RouteNearbyNeighborhoods</strong> checkbox. Click Apply.</p>

<p>2. Open AttributesToJSON configure properties tab and update the properties with the information listed in Table 2.</p>

<table>
  <thead>
    <tr>
      <th>Property</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Attributes List</td>
      <td>Vehicle_ID, city, Latitude, Longitude, neighborhoods_nearby, Last_Time</td>
    </tr>
    <tr>
      <td>Destination</td>
      <td>flowfile-content</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/learning-ropes-nifi-lab-series/lab2-geo-location-enrichment-nifi-lab-series/attributesToJSON_geoEnrich_config_property_tab_window.png" alt="attributesToJSON_geoEnrich_config_property_tab_window" /></p>

<p>3. Navigate  to the <strong>Settings</strong> tab, under Auto terminate relationships check the <strong>failure</strong> checkbox. Click <strong>Apply</strong> button.</p>

<h3 id="mergecontent">MergeContent</h3>

<p>1. Add the MergeContent processor onto the NiFi graph. Connect AttributesToJSON to MergeContent processor. When the Create Connection window appears, select <strong>success</strong> checkbox. Click Apply.</p>

<p>2. Open MergeContent configure properties tab and update the properties with the information listed in Table 2. For the Demarcator property, type <code class="highlighter-rouge">,</code> then press <code class="highlighter-rouge">shift+enter</code>.</p>

<table>
  <thead>
    <tr>
      <th>Property</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Minimum Number of Entries</td>
      <td>20</td>
    </tr>
    <tr>
      <td>Maximum Number of Entries</td>
      <td>25</td>
    </tr>
    <tr>
      <td>Delimiter Strategy</td>
      <td>Text</td>
    </tr>
    <tr>
      <td>Header</td>
      <td>[</td>
    </tr>
    <tr>
      <td>Footer</td>
      <td>]</td>
    </tr>
    <tr>
      <td>Demarcator</td>
      <td>,{press-shift+enter}</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/learning-ropes-nifi-lab-series/lab2-geo-location-enrichment-nifi-lab-series/mergeContent_geoEnrich_config_property_tab_window.png" alt="mergeContent_geoEnrich_config_property_tab_window" /></p>

<p>3. Navigate  to the <strong>Settings</strong> tab, under Auto terminate relationships check the <strong>failure</strong> and <strong>original</strong> checkbox. Click <strong>Apply</strong> button.</p>

<h3 id="putfile">PutFile</h3>

<p>1. Add the PutFile processor onto the NiFi graph. Connect MergeContent to PutFile processor. When the Create Connection window appears, select <strong>merged</strong> checkbox. Click Apply.</p>

<p>2. Open PutFile configure properties tab and update the property with the information listed in Table 2.</p>

<table>
  <thead>
    <tr>
      <th>Property</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Directory</td>
      <td>/home/nifi/output/nearby_neighborhoods_search</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/learning-ropes-nifi-lab-series/lab2-geo-location-enrichment-nifi-lab-series/putFile_geoEnrich_config_property_tab_window.png" alt="putFile_geoEnrich_config_property_tab_window" /></p>

<p>3. Navigate  to the <strong>Settings</strong> tab, under Auto terminate relationships check the <strong>success</strong> checkbox. Click <strong>Apply</strong> button. Connect the processor to itself and when the Create Connection window appears, select <strong>failure</strong> checkbox.</p>

<h3 id="step-3-run-nifi-dataflow">Step 3: Run NiFi DataFlow</h3>

<p>Now that we added geographic location enrichment dataflow section to our previous dataflow, let’s run the dataflow and verify if we receive the expected results in our output directory.</p>

<p>1. Go to the actions toolbar and click the start button <img src="/assets/learning-ropes-nifi-lab-series/lab1-build-nifi-dataflow/start_button_nifi_iot.png" alt="start_button_nifi_iot" />. Your screen should look like the following:</p>

<p><img src="/assets/learning-ropes-nifi-lab-series/lab2-geo-location-enrichment-nifi-lab-series/complete_dataflow_lab2_geoEnrich.png" alt="complete_dataflow_lab2_geoEnrich" /></p>

<p>2. Let’s check the data was written to our expected directory, open your terminal. Make sure to SSH into your sandbox if on sandbox, else navigate to the output directory on your local machine. Navigate to the directory you wrote for the PutFile processor. List the files and open one of the newly created files to view geographic neighborhoods nearby transit location enrichment data output. In the tutorial our directory path is: <code class="highlighter-rouge">/home/nifi/output/nearby_neighborhoods_search</code>.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>cd /home/nifi/output/nearby_neighborhoods_search
ls
vi 38997303004413
</code></pre>
</div>

<p><img src="/assets/learning-ropes-nifi-lab-series/lab2-geo-location-enrichment-nifi-lab-series/output_geoEnrich_nearby_neighborhoods_data.png" alt="output_geoEnrich_nearby_neighborhoods_data" /></p>

<h2 id="summary">Summary</h2>

<p>Congratulations! For the Geo Enrichment section of the dataflow, you learned to use InvokeHTTP to access geographic location of nearby places with Google Places Search API. You learned to add NiFi expression variables into InvokeHTTP property RemoteURL, so that the values for latitude and longitude constantly change in the URL when new FlowFiles pass through this processor. You learned to use EvaluateJsonPath similar to EvaluateXPath to extract JSON elements (neighborhoods_nearby &amp; city) from a JSON structure. Now you know how to incorporate external API’s into NiFi further enhance the dataflow.</p>

<h2 id="further-reading">Further Reading</h2>

</div>

<div id="tutorial-footer">
  <hr>
  <h2>Tutorial Q&amp;A and Reporting Issues</h2>
  <p>If you need help or have questions with this tutorial, please first check HCC for existing Answers to questions on this tutorial using the Find Answers button.  If you don't find your answer you can post a new HCC question for this tutorial using the Ask Questions button.</p>
  <p><a class="btn" href="https://community.hortonworks.com/topics/tutorial-640.html" role="button">Find Answers</a> <a class="btn pull-right" href="https://community.hortonworks.com/questions/ask.html?space=81&topics=tutorial-640&topics=hdp-2.4.0" role="button">Ask Questions</a></p>
  <p>Tutorial Name: <strong>Lab 2 Enhance the DataFlow with Geo Location Enrichment</strong></p>
  <p>HCC Tutorial Tag:<strong> tutorial-640</strong> and <strong>hdp-2.4.0</strong></p>
  <p>If the tutorial has multiple labs please indicate which lab your question corresponds to. Please provide any feedback related to that lab.</p>
  <p>All Hortonworks, partner and community tutorials are posted in the Hortonworks github and can be contributed via the <a href="https://github.com/hortonworks/tutorials/wiki">Hortonworks Tutorial Contribution Guide</a>.  If you are certain there is an issue or bug with the tutorial, please <a href="https://github.com/hortonworks/tutorials/wiki#issues-with-tutorials">create an issue</a> on the repository and we will do our best to resolve it!</p>
</div>
