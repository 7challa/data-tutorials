

<div class="tutorial-content">
  <h1 id="how-to-process-data-with-apache-hive">How to Process Data with Apache Hive</h1>

<h3 id="introduction">Introduction</h3>

<p>In this tutorial, we will use the <a href="http://hortonworks.com/hadoop/ambari/">Ambari</a> HDFS file view to store massive data files of baseball statistics. We will implement <a href="http://hortonworks.com/hadoop/hive/">Hive</a> queries to analyze, process and filter that data.</p>

<h2 id="pre-requisites">Pre-Requisites</h2>
<ul>
  <li>Downloaded and Installed latest <a href="http://hortonworks.com/products/hortonworks-sandbox/#install">Hortonworks Sandbox</a></li>
  <li><a href="http://hortonworks.com/hadoop-tutorial/learning-the-ropes-of-the-hortonworks-sandbox/">Learning the Ropes of the Hortonworks Sandbox</a></li>
  <li>Allow yourself around one hour to complete this tutorial</li>
</ul>

<h2 id="outline">Outline</h2>
<ul>
  <li><a href="#hive">Hive</a></li>
  <li><a href="#hive-or-pig">Hive or Pig?</a></li>
  <li><a href="#our-data-processing-task">Our Data Processing Task</a></li>
  <li><a href="#download-the-data">Step 1: Download The Data</a></li>
  <li><a href="#upload-the-data-files">Step 2: Upload The Data Files</a></li>
  <li><a href="#start-the-hive-view">Step 3: Start the Hive View</a></li>
  <li><a href="#further-reading">Further Reading</a></li>
  <li><a href="#summary">summary</a></li>
</ul>

<h2 id="hive-a-idhivea">Hive <a id="hive"></a></h2>

<p>Hive is a component of <a href="http://hortonworks.com/hdp/">Hortonworks Data Platform</a>(HDP). Hive provides a SQL-like interface to data stored in HDP. In the previous tutorial,
we used Pig, which is a scripting language with a focus on dataflows. Hive provides a database query interface to Apache Hadoop.</p>

<h2 id="hive-or-pig-a-idhive-or-piga">Hive or Pig? <a id="hive-or-pig"></a></h2>

<p>People often ask why do <a href="http://hortonworks.com/hadoop/pig/">Pig</a> and <a href="http://hortonworks.com/hadoop/hive/">Hive</a> exist when they seem to do much of the same thing. Hive because of its SQL like query language is 
often used as the interface to an Apache Hadoop based data warehouse. Hive is considered friendlier and more familiar to users who are 
used to using SQL for querying data. Pig fits in through its data flow strengths where it takes on the tasks of bringing data into Apache 
Hadoop and working with it to get it into the form for querying. A good overview of how this works is in Alan Gates posting on the Yahoo 
Developer blog titled <a href="https://developer.yahoo.com/blogs/hadoop/pig-hive-yahoo-464.html">Pig and Hive at Yahoo!</a> From a technical point 
of view, both Pig and Hive are feature complete, so you can do tasks in either tool. However, you will find one tool or the other will be 
preferred by the different groups that have to use Apache Hadoop. The good part is they have a choice and both tools work together.</p>

<h3 id="our-data-processing-task-a-idour-data-processing-taska">Our Data Processing Task <a id="our-data-processing-task"></a></h3>

<p>We are going to do the same data processing task as we just did with Pig in the previous tutorial. We have several files of baseball 
statistics and we are going to bring them into Hive and do some simple computing with them. We are going to find the player with the 
highest runs for each year. This file has all the statistics from 1871–2011 and contains more that 90,000 rows. Once we have the highest 
runs we will extend the script to translate a player id field into the first and last names of the players.</p>

<h3 id="step-1-download-the-data-a-iddownload-the-dataa">Step 1: Download The Data <a id="download-the-data"></a></h3>

<p>The data files we are using come from the site <a href="http://www.seanlahman.com/">SeanLahman.com</a>. You can download the following data file,
<a href="http://seanlahman.com/files/database/lahman591-csv.zip">lahman591-csv.zip</a>. Once you have the file you will need to unzip it into a 
directory. We will be uploading just the <code class="highlighter-rouge">Master.csv</code> and <code class="highlighter-rouge">Batting.csv</code> files from the dataset.</p>

<h3 id="step-2-upload-the-data-files-a-idupload-the-data-filesa">Step 2: Upload The Data Files <a id="upload-the-data-files"></a></h3>

<p>We start by selecting the HDFS Files view from the Off-canvas menu at the top. The <code class="highlighter-rouge">HDFS Files view</code> shows you the files in the HDP file
store. In this case, the file store resides in the Hortonworks Sandbox VM.</p>

<p><img src="/assets/hello-hdp/hdfs_files_view_hello_hdp_lab1.png" alt="HDFS File View Icon Image" /></p>

<p>Navigate to <code class="highlighter-rouge">/user/maria_dev</code> and click on the <strong>Upload</strong> button.</p>

<p><img src="/assets/how-to-process-data-with-apache-hive/user_maria_dev_hdfs_process_data_hive.png" alt="HDFS_maria_dev_Folder_Image" /></p>

<p>Clicking on browse will open a dialog box. Navigate to where you stored theBatting.csv file on your local disk and select <code class="highlighter-rouge">Batting.csv.</code> 
Do the same thing for <code class="highlighter-rouge">Master.csv.</code> When you are done you will see there are two files in your directory.</p>

<p><img src="/assets/how-to-process-data-with-apache-hive/stored_two_files_process_data_hive.png" alt="batting and master csv uploaded Image" /></p>

<h3 id="step-3-start-the-hive-view-a-idstart-the-hive-viewa">Step 3: Start the Hive View <a id="start-the-hive-view"></a></h3>

<p>Lets open the <code class="highlighter-rouge">Hive View</code>by clicking on the Hive button in the top bar as previously when we selected the HDFS Files view. The Hive view provides a user interface to the Hive data warehouse system for Hadoop.</p>

<p><img src="/assets/how-to-process-data-with-apache-hive/start_hive_view_process_data_hive.png" alt="Hive View Icon from HDFS warehouse" /></p>

<h4 id="explore-the-hive-user-interface">3.1 Explore The Hive User Interface</h4>

<p>On right is a <code class="highlighter-rouge">query editor</code>. A query may span multiple lines. At the bottom, there are buttons to <code class="highlighter-rouge">Execute</code> the query, <code class="highlighter-rouge">Explain</code> the query, <code class="highlighter-rouge">Save</code> the query with a name and to open a new Worksheet window for another query.</p>

<p><img src="/assets/how-to-process-data-with-apache-hive/hive_user_interface_process_data_hive.png" alt="hive ui" /></p>

<h5 id="hive-and-pig-data-model-differences">Hive and Pig Data Model Differences</h5>

<p>Before we get started let’s take a look at how <code class="highlighter-rouge">Pig and Hive</code> data models differ. In the case of Pig all data objects exist and are operated on in the script. Once the script is complete all data objects are deleted unless you stored them. In the case of Hive we are operating on the Apache Hadoop data store. Any query you make, table that you create, data that you copy persists from query to query. You can think of Hive as providing a data workbench where you can examine, modify and manipulate the data in Apache Hadoop. So when we perform our data processing task we will execute it one query or line at a time. Once a line successfully executes you can look at the data objects to verify if the last operation did what you expected. All your data is live, compared to Pig, where data objects only exist inside the script unless they are copied out to storage. This kind of flexibility is Hive’s strength. You can solve problems bit by bit and change your mind on what to do next depending on what you find.</p>

<h4 id="create-table-tempbatting">3.2 Create Table temp_batting</h4>

<p>The first task we will do is create a table to hold the data. We will type the query into the <code class="highlighter-rouge">composition area</code> on the right handside. Once you have typed in the query hit the <code class="highlighter-rouge">Execute</code> button at the bottom.</p>

<div class="language-sql highlighter-rouge"><pre class="highlight"><code><span class="k">create</span> <span class="k">table</span> <span class="n">temp_batting</span> <span class="p">(</span><span class="n">col_value</span> <span class="n">STRING</span><span class="p">);</span>
</code></pre>
</div>

<p><img src="/assets/how-to-process-data-with-apache-hive/temp_batting_table_process_data_hive.png" alt="temp_batting_query" /></p>

<blockquote>
  <p><strong>Hint:</strong> press <code class="highlighter-rouge">CTRL</code> + <code class="highlighter-rouge">Space</code> for autocompletion</p>
</blockquote>

<p>The query does not return any results because at this point we just created an empty table and we have not copied any data in it.</p>

<p>Once the query has executed we can refresh the <code class="highlighter-rouge">Database Explorer</code> at the left of the composition area and when folding down the default database we will see we have a new table called <code class="highlighter-rouge">temp_batting</code>.</p>

<p><img src="/assets/how-to-process-data-with-apache-hive/database_explorer_tempbatting_process_data_hive.png" alt="temp_batting_table_default_database" /></p>

<p>Clicking on the <code class="highlighter-rouge">icon</code> next to the table name a new Worksheets opens, which loads <code class="highlighter-rouge">sample data</code> from this table. We see the table is empty right now. This is a good example of the interactive feel you get with using Hive.</p>

<p><img src="/assets/how-to-process-data-with-apache-hive/icon_temp_batting_process_data_hive.png" alt="load_sample_data_temp_batting_empty" /></p>

<p>The next line of code will load the data file <code class="highlighter-rouge">Batting.csv</code> into the table <code class="highlighter-rouge">temp_batting</code>.</p>

<p><img src="/assets/how-to-process-data-with-apache-hive/load_data_tempbatting_process_data_hive.png" alt="load_battingcsv_into_temp_batting" /></p>

<h4 id="create-query-to-populate-hive-table-tempbatting-with-battingcsv-data">3.3 Create Query to Populate Hive Table temp_batting with Batting.csv Data</h4>

<p>The complete query looks like this.</p>

<div class="language-sql highlighter-rouge"><pre class="highlight"><code><span class="k">LOAD</span> <span class="k">DATA</span> <span class="n">INPATH</span> <span class="s1">'/user/maria_dev/Batting.csv'</span> <span class="n">OVERWRITE</span> <span class="k">INTO</span> <span class="k">TABLE</span> <span class="n">temp_batting</span><span class="p">;</span>
</code></pre>
</div>

<p>After executing the query we can look at the Tables again and when we browse the data for <code class="highlighter-rouge">temp_batting</code> we see that the data has been read in. Note Hive consumed the data file <code class="highlighter-rouge">Batting.csv</code> during this step. If you look in the <code class="highlighter-rouge">File Browser</code> you will see Batting.csv is no longer there.</p>

<p><img src="/assets/how-to-process-data-with-apache-hive/verify_tempbatting_read_data_process_data_hive.png" alt="temp_batting_sample_data_has_data" /></p>

<h4 id="create-table-batting">3.4 Create Table batting</h4>

<p>Now that we have read the data in we can start working with it. The next thing we want to do extract the data. So first we will type in a query to create a new table called <code class="highlighter-rouge">batting</code> to hold the data. That table will have three columns for <code class="highlighter-rouge">player_id, year and the number of runs</code>.</p>

<div class="language-sql highlighter-rouge"><pre class="highlight"><code><span class="k">create</span> <span class="k">table</span> <span class="n">batting</span> <span class="p">(</span><span class="n">player_id</span> <span class="n">STRING</span><span class="p">,</span> <span class="k">year</span> <span class="n">INT</span><span class="p">,</span> <span class="n">runs</span> <span class="n">INT</span><span class="p">);</span>
</code></pre>
</div>

<p><img src="/assets/how-to-process-data-with-apache-hive/create_batting_table_process_data_hive.png" alt="batting_query" /></p>

<h4 id="create-query-to-extract-data-from-tempbatting-and-store-it-to-batting">3.5 Create Query to Extract Data from temp_batting and Store It to batting</h4>

<p>Then we extract the data we want from <code class="highlighter-rouge">temp_batting</code> and copy it into <code class="highlighter-rouge">batting</code>. We will do this with a regexp pattern. To do this we are going to build up a multi-line query. The first line of the query create the table <code class="highlighter-rouge">batting</code>. The three regexp_extract calls are going to extract the <code class="highlighter-rouge">player_id, year and run</code> fields from the table temp_batting. When you are done typing the query it will look like this. Be careful as there are no spaces in the regular expression pattern.</p>

<div class="language-sql highlighter-rouge"><pre class="highlight"><code><span class="k">insert</span> <span class="n">overwrite</span> <span class="k">table</span> <span class="n">batting</span>  
<span class="k">SELECT</span>  
  <span class="n">regexp_extract</span><span class="p">(</span><span class="n">col_value</span><span class="p">,</span> <span class="s1">'^(?:([^,]*)</span><span class="se">\,</span><span class="s1">?){1}'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="n">player_id</span><span class="p">,</span>  
  <span class="n">regexp_extract</span><span class="p">(</span><span class="n">col_value</span><span class="p">,</span> <span class="s1">'^(?:([^,]*)</span><span class="se">\,</span><span class="s1">?){2}'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">year</span><span class="p">,</span>  
  <span class="n">regexp_extract</span><span class="p">(</span><span class="n">col_value</span><span class="p">,</span> <span class="s1">'^(?:([^,]*)</span><span class="se">\,</span><span class="s1">?){9}'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="n">run</span>  
<span class="k">from</span> <span class="n">temp_batting</span><span class="p">;</span>
</code></pre>
</div>

<p><img src="/assets/how-to-process-data-with-apache-hive/overwrite_batting_table_process_data_hive.png" alt="filter_batting_player_year_run_query" /></p>

<p>Execute the query and look at the <code class="highlighter-rouge">batting table</code>. You should see data that looks like this.</p>

<p><img src="/assets/how-to-process-data-with-apache-hive/view_batting_table_data_process_data_hive.png" alt="load_sample_batting_table_data" /></p>

<h4 id="create-query-to-filter-the-data-year-runs">3.6 Create Query to Filter The Data (year, runs)</h4>

<p>Now we have the data fields we want. The next step is to <code class="highlighter-rouge">group</code> the data by year so we can find the highest score for each <code class="highlighter-rouge">year</code>. This query first groups all the records by year and then selects the <code class="highlighter-rouge">player with the highest runs</code> from each year.</p>

<div class="language-sql highlighter-rouge"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">year</span><span class="p">,</span> <span class="k">max</span><span class="p">(</span><span class="n">runs</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">batting</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="k">year</span><span class="p">;</span>
</code></pre>
</div>

<p>The results of the query look like this.</p>

<p><img src="/assets/how-to-process-data-with-apache-hive/filter_data_years_runs_process_data_hive.png" alt="group_year_highest_runs" /></p>

<h4 id="create-query-to-filter-the-data-year-player-runs">3.7 Create Query to Filter The Data (year, player, runs)</h4>

<p>Now we need to go back and get the <code class="highlighter-rouge">player_id(s)</code> so we know who the player(s) was. We know that for a given year we can use the runs to find the player(s) for that year. So we can take the previous query and join it with the <code class="highlighter-rouge">batting records</code> to get the final table.</p>

<div class="language-sql highlighter-rouge"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">a</span><span class="p">.</span><span class="k">year</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">player_id</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">runs</span> <span class="k">from</span> <span class="n">batting</span> <span class="n">a</span>  
<span class="k">JOIN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">year</span><span class="p">,</span> <span class="k">max</span><span class="p">(</span><span class="n">runs</span><span class="p">)</span> <span class="n">runs</span> <span class="k">FROM</span> <span class="n">batting</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="k">year</span> <span class="p">)</span> <span class="n">b</span>  
<span class="k">ON</span> <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="k">year</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="k">year</span> <span class="k">AND</span> <span class="n">a</span><span class="p">.</span><span class="n">runs</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">runs</span><span class="p">);</span>
</code></pre>
</div>

<p>The resulting data looks like:</p>

<p><img src="/assets/how-to-process-data-with-apache-hive/filter_data_player_runs_year_process_data_hive.png" alt="year_playerid_runs_data_table" /></p>

<p>So now we have our results. As described earlier we solved this problem using Hive step by step. At any time we were free to look around at the data, decide we needed to do another task and come back. At all times the data is live and accessible to us.</p>

<h2 id="summary-a-idsummarya">Summary <a id="summary"></a></h2>

<p>Congratulations on completing this tutorial! We just learned how to upload data into HDFS Files View and create hive queries to manipulate data. Let’s review all the queries that were utilized in this tutorial: <strong>create</strong>, <strong>load</strong>, <strong>insert</strong>, <strong>select</strong>, <strong>from</strong>, <strong>group by</strong>, <strong>join</strong> and <strong>on</strong>. With these queries, we created a table <em>temp_batting</em> to store the data. We created another table <em>batting</em>, so we can overwrite that table with extracted data from the <em>temp_batting</em> table we created earlier. Finally, created queries to filter the data to have the result show the best player runs each year.</p>

<h2 id="further-reading-a-idfurther-readinga">Further Reading <a id="further-reading"></a></h2>
<ul>
  <li><a href="http://hortonworks.com/hadoop/hive/">Apache Hive</a></li>
  <li><a href="http://hortonworks.com/hadoop/hive/#tutorials">Hive Tutorials</a></li>
  <li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL">Hive Language Manual</a></li>
</ul>


</div>

<div id="tutorial-footer">
  <hr>
  <h2>Tutorial Q&amp;A and Reporting Issues</h2>
  <p>If you need help or have questions with this tutorial, please first check HCC for existing Answers to questions on this tutorial using the Find Answers button.  If you don't find your answer you can post a new HCC question for this tutorial using the Ask Questions button.</p>
  <p><a class="btn" href="https://community.hortonworks.com/topics/tutorial-110.html" role="button">Find Answers</a> <a class="btn pull-right" href="https://community.hortonworks.com/questions/ask.html?space=81&topics=tutorial-110&topics=hdp-2.4.0" role="button">Ask Questions</a></p>
  <p>Tutorial Name: <strong>How to Process Data with Apache Hive</strong></p>
  <p>HCC Tutorial Tag:<strong> tutorial-110</strong> and <strong>hdp-2.4.0</strong></p>
  <p>If the tutorial has multiple labs please indicate which lab your question corresponds to. Please provide any feedback related to that lab.</p>
  <p>All Hortonworks, partner and community tutorials are posted in the Hortonworks github and can be contributed via the <a href="https://github.com/hortonworks/tutorials/wiki">Hortonworks Tutorial Contribution Guide</a>.  If you are certain there is an issue or bug with the tutorial, please <a href="https://github.com/hortonworks/tutorials/wiki#issues-with-tutorials">create an issue</a> on the repository and we will do our best to resolve it!</p>
</div>
