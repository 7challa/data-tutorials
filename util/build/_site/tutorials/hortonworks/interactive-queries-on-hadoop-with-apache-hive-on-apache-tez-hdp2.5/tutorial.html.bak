

<div class="tutorial-content">
  <h1 id="interactive-query-for-hadoop-with-apache-hive-on-apache-tez">Interactive Query for Hadoop with Apache Hive on Apache Tez</h1>

<h3 id="introduction">Introduction</h3>

<p>In this tutorial, we’ll focus on taking advantage of the improvements to <a href="http://hortonworks.com/hadoop/hive">Apache Hive</a> and <a href="http://hortonworks.com/hadoop/tez">Apache Tez</a> through the work completed by the community as part of the <a href="http://hortonworks.com/labs/stinger">Stinger initiative</a>. These features will be discussed in this tutorial:</p>

<ul>
  <li>Performance improvements of Hive on Tez</li>
  <li>Performance improvements of Vectorized Query</li>
  <li>Cost-based Optimization Plans</li>
  <li>Multi-tenancy with HiveServer2</li>
  <li>SQL Compliance Improvements</li>
</ul>

<h2 id="pre-requisites">Pre-Requisites</h2>
<ul>
  <li>Downloaded and Installed latest <a href="http://hortonworks.com/downloads/#sandbox">Hortonworks Sandbox</a></li>
  <li><a href="http://hortonworks.com/hadoop-tutorial/learning-the-ropes-of-the-hortonworks-sandbox/">Learning the Ropes of the Hortonworks Sandbox</a></li>
  <li>Allow yourself around one hour to complete this tutorial</li>
</ul>

<h2 id="outline">Outline</h2>
<ul>
  <li><a href="#download-data">Step 1: Download Data</a></li>
  <li><a href="#upload_data_using_hdfs">Step 2: Upload Data Using HDFS Files View</a></li>
  <li><a href="#create-hive-queries">Step 3: Create Hive Queries</a></li>
  <li><a href="#speed-improvements">Speed Improvements</a></li>
  <li><a href="#configure-mapreduce-engine-in-hive-settings">Step 4: Configure MapReduce as Execution Engine in Hive view Settings Tab</a></li>
  <li><a href="#test-query-mapreduce-engine">Step 5: Test Query on MapReduce Engine</a></li>
  <li><a href="#configure-tez-engine-in-hive-settings">Step 6: Configure Tez as Execution Engine in Hive view Settings Tab</a></li>
  <li><a href="#test-query-on-tez-engine">Step 7: Test Query on Tez Engine</a></li>
  <li><a href="#execute-query-mapreduce-tez-engine">Step 8: Execute Query as MapReduce Then Tez Engine</a></li>
  <li><a href="#track-hive-on-tez-jobs">Step 9: Track Hive on Tez Jobs</a></li>
  <li><a href="#stats-cost-optimization">Stats &amp; Cost Based Optimization (CBO)</a></li>
  <li><a href="#multi-tenancy-hiveserver2">Multi-tenancy with HiveServer2</a></li>
  <li><a href="#sql-compliance">SQL Compliance</a></li>
  <li><a href="#summary">Summary</a></li>
  <li><a href="#further-reading">Further Reading</a></li>
</ul>

<h3 id="step-1-download-data-">Step 1: Download Data <a id="download-data"></a></h3>

<p>Download the driver data file from <a href="https://github.com/hortonworks/tutorials/blob/hdp-2.5/driver_data.zip">here</a>.</p>

<p>Once you have the file you will need to unzip the file into a directory. We will be uploading two csv files - drivers.csv and timesheet.csv.</p>

<h3 id="step-2-upload-data-using-hdfs-files-view">Step 2: Upload Data Using HDFS Files View<a id="upload_data_using_hdfs"></a></h3>

<p>Let’s use the above two csv files <code class="highlighter-rouge">(drivers.csv and timesheet.csv)</code> to create two new tables using the following step. Navigate to http://sandbox.hortonworks.com:8080 using your browser. Click the HDFS <code class="highlighter-rouge">Files view</code> from the dropdown menu.</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/select_files_view.png" alt="select_files_view" /></p>

<p>Go to the <code class="highlighter-rouge">/tmp</code> folder and if it is not already present, create a new directory called <code class="highlighter-rouge">data</code> using the controls toward the top of the screen. Then right-click on the folder and click <code class="highlighter-rouge">Permissions</code>. Make sure to check (blue) all of the permissions boxes.</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/edit_permissions.png" alt="edit_permissions" /></p>

<p>Now, let’s upload the above data files into HDFS and create two hive tables using the following steps.
Upload the two files under <code class="highlighter-rouge">/tmp/data</code> using <code class="highlighter-rouge">Upload</code> at the top of the screen</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/uploaded_files.png" alt="uploaded_files" /></p>

<h3 id="step-3-create-hive-queries-">Step 3: Create Hive Queries <a id="create-hive-queries"></a></h3>

<p>Now head on over to the <code class="highlighter-rouge">Hive view</code></p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/select_hive_view.png" alt="select_hive_view" /></p>

<p>We will now use hive and create the two tables. They will be named per the csv file names : <code class="highlighter-rouge">drivers</code> and <code class="highlighter-rouge">timesheet</code>.
Use the following two queries to create the tables a then load the data</p>

<h4 id="31-create-table-drivers">3.1 Create Table drivers</h4>

<div class="highlighter-rouge"><pre class="highlight"><code>create table drivers
(driverId int,
 name string,
 ssn bigint,
 location string,
 certified string,
 wageplan string)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE
TBLPROPERTIES("skip.header.line.count"="1");
</code></pre>
</div>

<h4 id="32-create-table-timesheet">3.2 Create Table timesheet</h4>

<div class="highlighter-rouge"><pre class="highlight"><code>create table timesheet
(driverId int,
 week int,
 hours_logged int,
 miles_logged int)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE
TBLPROPERTIES("skip.header.line.count"="1");
</code></pre>
</div>

<p>Go to the <code class="highlighter-rouge">Database Explorer</code> and <code class="highlighter-rouge">Refresh</code>, then click on <code class="highlighter-rouge">default</code> database.</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/database_explorer.png" alt="database_explorer" /></p>

<blockquote>
  <p>Tables In DataBase Explorer</p>
</blockquote>

<p>We’re are now going to load the data into the two tables using the <code class="highlighter-rouge">LOAD DATA INPATH</code> Hive command</p>

<h4 id="33-load-data-into-query-tables">3.3 Load Data into Query Tables</h4>

<div class="highlighter-rouge"><pre class="highlight"><code>LOAD DATA INPATH '/tmp/data/drivers.csv' OVERWRITE INTO TABLE drivers;
LOAD DATA INPATH '/tmp/data/timesheet.csv' OVERWRITE INTO TABLE timesheet;
</code></pre>
</div>

<p>You should now be able to obtain results when selecting small amounts of data from either table:</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/select_data_drivers.png" alt="select_data_drivers" /></p>

<h3 id="speed-improvements-">Speed Improvements <a id="speed-improvements"></a></h3>

<p>To take a look at the speed improvements of Hive on Tez, we can run some sample queries. For this we will use the above two tables – hvac and building.</p>

<p>By default, the Hive view runs with Tez as it’s execution engine. That’s because Tez has great speed improvements over the original MapReduce execution engine. But by how much exactly are these improvements? Well let’s find out!</p>

<h3 id="step-4-configure-mapreduce-as-execution-engine-in-hive-view-settings-tab-">Step 4: Configure MapReduce as Execution Engine in Hive view Settings Tab <a id="configure-mapreduce-engine-in-hive-settings"></a></h3>

<p>Click on the Hive view <code class="highlighter-rouge">Settings</code> tab. Then we’re going to need to add new settings.</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/settings_page.png" alt="settings_page" /></p>

<p>Then we’re going to need to find the property which is <code class="highlighter-rouge">hive.execution.engine</code>. Select this property and then for its value select, <code class="highlighter-rouge">mr</code> (short for MapReduce).</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/hive_execution_engine.png" alt="hive_execution_engine" /></p>

<p>Add one more property - <code class="highlighter-rouge">hive.auto.convert.join</code> and for its value, select <code class="highlighter-rouge">False</code>.</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/hive_auto_convert_join.png" alt="hive_auto_convert_join" /></p>

<h3 id="step-5-test-query-on-mapreduce-engine-">Step 5: Test Query on MapReduce Engine <a id="test-query-mapreduce-engine"></a></h3>

<p>We are now going to test a query using MapReduce as our execution engine. Execute the following query and wait for the results.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>select d.*, t.hours_logged, t.miles_logged
from drivers d join timesheet t
on d.driverId = t.driverId;
</code></pre>
</div>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/first_join_mr.png" alt="first_join_mr" /></p>

<p>This query was run using the MapReduce framework.</p>

<h3 id="step-6-configure-tez-as-execution-engine-in-hive-view-settings-tab-">Step 6: Configure Tez as Execution Engine in Hive view Settings Tab <a id="configure-tez-engine-in-hive-settings"></a></h3>

<p>Now we can enable Hive on Tez execution and take advantage of Directed Acyclic Graph (DAG) execution representing the query instead of multiple stages of MapReduce program which involved a lot of synchronization, barriers and IO overheads. This is improved in Tez, by writing intermediate data set into memory instead of hard disk.</p>

<p>Head back to the <strong>Settings</strong> in the Hive view and now change the <code class="highlighter-rouge">hive.execution.engine</code> to <code class="highlighter-rouge">tez</code>.</p>

<h3 id="step-7-test-query-on-tez-engine-">Step 7: Test Query on Tez Engine <a id="test-query-on-tez-engine"></a></h3>

<p>Run the same query as we had run earlier in Step 5, to see the speed improvements with Tez.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>select d.*, t.hours_logged, t.miles_logged
from drivers d join timesheet t
on d.driverId = t.driverId;
</code></pre>
</div>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/first_join_mr.png" alt="first_join_mr1" /></p>

<p>Check the output of this job. It shows the usage of the containers.
Here is the rest of the output log:</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/first_join_tez_logs.png" alt="first_join_tez_logs" /></p>

<p>Notice that the results will have appeared much quicker while having the execution engine set to Tez. This is currently the default for all Hive queries.</p>

<p>Congratulations! You have successfully run your Hive on Tez Job.</p>

<h3 id="step-8-execute-query-as-mapreduce-then-tez-engine-">Step 8: Execute Query as MapReduce Then Tez Engine <a id="execute-query-mapreduce-tez-engine"></a></h3>

<p>Now let’s try a new query to work with</p>

<div class="highlighter-rouge"><pre class="highlight"><code>SELECT d.driverId, d.name, t.total_hours, t.total_miles from drivers d  
JOIN (SELECT driverId, sum(hours_logged)total_hours, sum(miles_logged)total_miles FROM timesheet GROUP BY driverId ) t  
ON (d.driverId = t.driverId);
</code></pre>
</div>

<p>Try executing the query first on MapReduce execution engine, then on Tez. You should notice a considerable gap in execution time.
Here is the result.</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/second_join_mr.png" alt="second_join_mr" /></p>

<p>To experience this further, you could use your own dataset, upload to your HDP Sandbox using steps above and execute with and without Tez to compare the difference.</p>

<h3 id="step-9-track-hive-on-tez-jobs-">Step 9: Track Hive on Tez Jobs <a id="track-hive-on-tez-jobs"></a></h3>

<p>You can track your Hive on Tez jobs in HDP Sandbox Web UI as well. Please go to : <a href="http://127.0.0.1:8088/cluster">http://127.0.0.1:8088/cluster</a> and track your jobs while running or post to see the details.</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/all_applications.png" alt="all_applications" /></p>

<p>You can click on your job and see further details.</p>

<h3 id="stats--cost-based-optimization-cbo-">Stats &amp; Cost Based Optimization (CBO) <a id="stats-cost-optimization"></a></h3>

<p>Cost Based Optimization(CBO) engine uses statistics within Hive tables to produce optimal query plans.</p>

<h3 id="benefits-of-cbo">Benefits of CBO</h3>

<ol>
  <li>Reduces need of a specialists to tune queries</li>
  <li>More efficient query plans lead to better cluster utilization</li>
</ol>

<h3 id="types-of-stats">Types of Stats</h3>

<p>There are two types of stats which could be collected so that the optimizer could use it in the decision making process :</p>

<ol>
  <li>Table Stats</li>
  <li>Column Stats</li>
</ol>

<p>The ‘explain’ plan feature can be used to see if the correct stats are being used.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>Note : CBO requires column stats.
</code></pre>
</div>

<h3 id="phases-in-which-stats-could-be-collected">Phases in which stats could be collected</h3>

<ol>
  <li>While data is inserted: <code class="highlighter-rouge">hive.stats.autographer =  [true,  **false**]</code></li>
  <li>On existing data : table level <code class="highlighter-rouge">ANALYZE TABLE table [partition(key)] COMPUTE STATISTICS;</code></li>
  <li>On existing data : column level <code class="highlighter-rouge">ANALYZE TABLE table [partition(key)] COMPUTE STATISTICS FOR COLUMNS col1,col2,...;</code></li>
</ol>

<h3 id="configuration-to-make-cbo-effective-for-your-query">Configuration to make CBO effective for your query</h3>

<ol>
  <li><code class="highlighter-rouge">hive.compute.query.using.stats =  [true,  **false**];</code></li>
  <li><code class="highlighter-rouge">hive.stats.fetch.column.stats =  [true,  **false**];</code></li>
  <li><code class="highlighter-rouge">hive.stats.fetch.partition.stats =  [true,  **false**];</code></li>
  <li><code class="highlighter-rouge">hive.cbo.enable =  [true,  **false**];</code></li>
</ol>

<p>Currently, CBO for Hive is enabled by defaults. You can see this if you head over to the Hive configuration tab in Ambari.</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/cbo.png" alt="cbo" /></p>

<p>As you can see the CBO flag is <strong>on</strong>, meaning that Hive will attempt to optimize complex queries in order to shorten the execution time.</p>

<p>However, the only caveat is that for each table you will need to compute statistics before CBO can be utilized.</p>

<div class="highlighter-rouge"><pre class="highlight"><code># Usage:
       # ANALYZE TABLE table [partition(key)] COMPUTE STATISTICS;
       # ANALYZE TABLE table [partition(key)] COMPUTE STATISTICS FOR COLUMNS col1,col2,...
# Example:         
         ANALYZE TABLE drivers COMPUTE STATISTICS FOR COLUMNS driverId, name;
</code></pre>
</div>

<p>Once these two commands are both executed, Hive will utilize CBO on more complex queries.</p>

<h2 id="multi-tenancy-with-hiveserver2-">Multi-tenancy with HiveServer2 <a id="multi-tenancy-hiveserver2"></a></h2>

<p>There could be contentions when multiple users run large queries simultaneously. Processing queries with many containers could lead to lower latency. For this, 3 controls could be put in place:</p>

<ul>
  <li>Container re-use timeout</li>
  <li>Tez split wave tuning</li>
  <li>Round Robin Queuing setup</li>
</ul>

<h3 id="diagnose-job-viewer">Diagnose: Job Viewer</h3>

<p>Hive Job Viewer available in Ambari is a simple exploration and troubleshooting Graphical tool for Hive jobs.</p>

<p>The purposes of this Job Viewer are as follows:</p>

<ul>
  <li>Visualize execution DAG</li>
  <li>Drill Down into individual stages for:
    <ul>
      <li>Execution status</li>
      <li>Duration</li>
      <li>Number of bytes read and written, No of containers, etc.<br />
DAG Viewer is releasing soon, which will be available in Ambari.</li>
    </ul>
  </li>
</ul>

<p>Run a simple query such as:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>ANALYZE TABLE drivers COMPUTE STATISTICS FOR COLUMNS driverId, name;
</code></pre>
</div>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/analyze_table_drivers.png" alt="analyze_table_drivers" /></p>

<p>To see the job executions visually, you can open the <strong>Tez View</strong> in Ambari Views. Tez View will take you to DAG Details, which includes all your DAG projects.</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/tez_view_home_page.png" alt="tez_view_home_page" /></p>

<p>Click on the first DAG name,</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/analyze_table_dag.png" alt="analyze_table_dag" /></p>

<blockquote>
  <p>Notice the query utilized in the photo is “ANALYZE TABLE drivers COMPUTE STATISTICS FOR COLUMNS.”</p>
</blockquote>

<p>Try clicking on the different parts above, such as <strong>Graphical View</strong> and explore some of the other execution information from Tez.</p>

<p><img src="/assets/interactive-queries-on-hadoop-with-apache-hive-on-apache-tez-hdp2.5/graphical_view_dag.png" alt="graphical_view_dag" /></p>

<h3 id="sql-compliance-">SQL Compliance <a id="sql-compliance"></a></h3>

<p>There are several SQL query enhancements in this version of Hive.</p>

<h4 id="query-enhancements-support-extensions">Query Enhancements Support extensions:</h4>

<ul>
  <li>Expanded Join Semantics – Supports from table1, table2 where table1.col1=table2.col2</li>
  <li>IN, NOT IN subqueries in WHERE Clause</li>
  <li>EXISTS and NOT EXISTS</li>
  <li>Correlated Subqueries with equality operation only</li>
  <li>Common Table Expressions (CTE)</li>
  <li>The CHAR datatype – trailing White Space</li>
</ul>

<h4 id="authorization-system-enhancements">Authorization System enhancements:</h4>

<ul>
  <li>SQL Authorizations : Actions
    <ul>
      <li>Grant/Revoke
        <ul>
          <li>Create</li>
          <li>Insert</li>
          <li>Select</li>
          <li>Drop</li>
          <li>Delete</li>
          <li>All
            <ul>
              <li>Create Roles &amp; Grant with admin option</li>
              <li>Using views to restrict data visibility</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="summary-">Summary <a id="summary"></a></h3>

<p>You learned to perform basic hive queries, compared Hive on MapReduce and Tez Engine</p>

<h3 id="further-reading-">Further Reading <a id="further-reading"></a></h3>
<ul>
  <li><a href="http://hortonworks.com/hadoop/hive/">Apache Hive</a></li>
  <li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL">Hive Language Manual</a></li>
</ul>

</div>

<div id="tutorial-footer">
  <hr>
  <h2>Tutorial Q&amp;A and Reporting Issues</h2>
  <p>If you need help or have questions with this tutorial, please first check HCC for existing Answers to questions on this tutorial using the Find Answers button.  If you don't find your answer you can post a new HCC question for this tutorial using the Ask Questions button.</p>
  <p><a class="btn" href="https://community.hortonworks.com/topics/tutorial-290.html" role="button">Find Answers</a> <a class="btn pull-right" href="https://community.hortonworks.com/questions/ask.html?space=81&topics=tutorial-290&topics=hdp-2.5.0" role="button">Ask Questions</a></p>
  <p>Tutorial Name: <strong>Interactive Query for Hadoop with Apache Hive on Apache Tez</strong></p>
  <p>HCC Tutorial Tag:<strong> tutorial-290</strong> and <strong>hdp-2.5.0</strong></p>
  <p>If the tutorial has multiple labs please indicate which lab your question corresponds to. Please provide any feedback related to that lab.</p>
  <p>All Hortonworks, partner and community tutorials are posted in the Hortonworks github and can be contributed via the <a href="https://github.com/hortonworks/tutorials/wiki">Hortonworks Tutorial Contribution Guide</a>.  If you are certain there is an issue or bug with the tutorial, please <a href="https://github.com/hortonworks/tutorials/wiki#issues-with-tutorials">create an issue</a> on the repository and we will do our best to resolve it!</p>
</div>
