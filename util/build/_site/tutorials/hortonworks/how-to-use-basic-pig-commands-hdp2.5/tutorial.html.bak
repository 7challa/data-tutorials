

<div class="tutorial-content">
  <h1 id="beginners-guide-to-apache-pig">Beginners Guide to Apache Pig</h1>

<p>In this tutorial you will gain a working knowledge of Pig through the hands-on experience of creating Pig scripts to carry out essential data operations and tasks.</p>

<p>We will first read in two data files that contain driver data statistics, and then use these files to perform a number of Pig operations including:</p>

<ul>
  <li>Define a relation with and without <code class="highlighter-rouge">schema</code></li>
  <li>Define a new relation from an <code class="highlighter-rouge">existing relation</code></li>
  <li><code class="highlighter-rouge">Select</code> specific columns from within a relation</li>
  <li><code class="highlighter-rouge">Join</code> two relations</li>
  <li>Sort the data using <code class="highlighter-rouge">‘ORDER BY’</code></li>
  <li>FILTER and Group the data using <code class="highlighter-rouge">‘GROUP BY’</code></li>
</ul>

<h2 id="pre-requisites">Pre-Requisites</h2>
<ul>
  <li>Downloaded and Installed latest <a href="http://hortonworks.com/downloads/#sandbox">Hortonworks Sandbox</a></li>
  <li><a href="http://hortonworks.com/hadoop-tutorial/learning-the-ropes-of-the-hortonworks-sandbox/">Learning the Ropes of the Hortonworks Sandbox</a></li>
  <li>Allow yourself around one hour to complete this tutorial</li>
</ul>

<h2 id="outline">Outline</h2>
<ul>
  <li><a href="#what-is-pig">What is Pig?</a></li>
  <li><a href="#download-the-data">Step 1: Download the Data</a></li>
  <li><a href="#step-2-upload-the-data-files">Step 2: Upload the data files</a></li>
  <li><a href="#step-3-create-your-script">Step 3: Create Your Script</a></li>
  <li><a href="#step-4-define-a-relation">Step 4: Define a relation</a></li>
  <li><a href="#step-5-save-and-execute-the-script">Step 5: Save and Execute the Script</a></li>
  <li><a href="#step-6-define-a-relation-with-a-schema">Step 6: Define a Relation with a Schema</a></li>
  <li><a href="#step-7-define-a-new-relation-from-an-existing-relation">Step 7: Define a new relation from an existing relation</a></li>
  <li><a href="#step-8-view-the-data">Step 8: View the Data</a></li>
  <li><a href="#step-9-select-specific-columns-from-a-relation">Step 9: Select specific columns from a relation</a></li>
  <li><a href="#step-10-store-relationship-data-into-a-hdfs-file">Step 10: Store relationship data into a HDFS File</a></li>
  <li><a href="#step-11-perform-a-join-between-2-relations">Step 11: Perform a join between 2 relations</a></li>
  <li><a href="#step-12-sort-the-data-using-order-by">Step 12: Sort the data using “ORDER BY”</a></li>
  <li><a href="#step-13-filter-and-group-the-data-using-group-by">Step 13: Filter and Group the data using “GROUP BY”</a></li>
  <li><a href="#further-reading">Further Reading</a></li>
</ul>

<h2 id="what-is-pig-">What is Pig? <a id="what-is-pig"></a></h2>

<p><code class="highlighter-rouge">Pig</code> is a high level scripting language that is used with Apache Hadoop. Pig enables data workers to write complex data transformations without knowing Java. Pig’s simple SQL-like scripting language is called Pig Latin, and appeals to developers already familiar with scripting languages and SQL.</p>

<p>Pig is complete, so you can do all required data manipulations in Apache Hadoop with Pig. Through the User Defined Functions(UDF) facility in Pig, Pig can invoke code in many languages like JRuby, Jython and Java. You can also embed Pig scripts in other languages. The result is that you can use Pig as a component to build larger and more complex applications that tackle real business problems.</p>

<p>Pig works with data from many sources, including structured and unstructured data, and store the results into the Hadoop Data File System.</p>

<p>Pig scripts are translated into a series of MapReduce jobs that are run on the Apache Hadoop cluster.</p>

<h3 id="step-1-download-the-data-">Step 1: Download the Data <a id="download-the-data"></a></h3>

<p>Download the driver data file from <a href="https://github.com/hortonworks/tutorials/blob/hdp-2.5/driver_data.zip">here</a>.
Once you have the file you will need to unzip the file into a directory. We will be uploading two csv files - <code class="highlighter-rouge">truck_event_text_partition.csv</code> and <code class="highlighter-rouge">drivers.csv</code>.</p>

<h3 id="step-2-upload-the-data-files-">Step 2: Upload the data files <a id="step-2-upload-the-data-files"></a></h3>

<p>Select the <code class="highlighter-rouge">HDFS Files view</code> from the Off-canvas menu at the top. That is the <code class="highlighter-rouge">views menu</code>. The HDFS Files view allows you to view the Hortonworks Data Platform(HDP) file store. The HDP file system is separate from the local file system.</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/select_files_view.png" alt="select_files_view" /></p>

<p>Navigate to <code class="highlighter-rouge">/user/maria_dev</code> or a path of your choice, click <code class="highlighter-rouge">Upload</code> and <code class="highlighter-rouge">Browse</code>, which brings up a dialog box where you can select the <code class="highlighter-rouge">drivers.csv</code> file from your computer. Upload the <code class="highlighter-rouge">truck_event_text_partition.csv</code> file in the same way. When finished, notice that both files are now in HDFS.</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/uploaded_files.png" alt="uploaded_files" /></p>

<h3 id="step-3-create-your-script-">Step 3: Create Your Script <a id="step-3-create-your-script"></a></h3>

<p>Open the Pig interface by clicking the <code class="highlighter-rouge">Pig View</code> in the <code class="highlighter-rouge">views menu</code>.</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/select_pig_view.png" alt="select_pig_view" /></p>

<p>On the left we can choose between our saved <code class="highlighter-rouge">Pig Scripts</code>, <code class="highlighter-rouge">UDFs</code> and the <code class="highlighter-rouge">Pig Jobs</code> executed in the past. To the right of this menu bar we see our saved Pig Scripts.</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/pig_view_home_page.png" alt="pig_view_home_page" /></p>

<p>Click on the button <code class="highlighter-rouge">"New Script"</code>, enter “Truck-Events” for the title of your script and leave the location path empty:</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/create_new_script.png" alt="create_new_script" /></p>

<p>Below you can find an overview about which functionalities the pig interface makes available. A special feature of the interface is the PIG helper at the top left of the composition area, which provides templates for Pig statements, functions, I/O statements, HCatLoader() and Python user defined functions.</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/explain_pig_view_home_page.png" alt="explain_pig_view_home_page" /></p>

<h3 id="step-4-define-a-relation-">Step 4: Define a relation <a id="step-4-define-a-relation"></a></h3>

<p>In this step, you will create a script to load the data and define a relation.</p>

<ul>
  <li>On line 1 define a relation named <code class="highlighter-rouge">truck_events</code> that represents all the truck events</li>
  <li>On line 2 use the <code class="highlighter-rouge">DESCRIBE</code> command to view the <code class="highlighter-rouge">truck_events</code> relation</li>
</ul>

<p>The completed code will look like:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>truck_events = LOAD '/user/maria_dev/truck_event_text_partition.csv' USING PigStorage(',');
DESCRIBE truck_events;
</code></pre>
</div>

<blockquote>
  <p><strong>Note:</strong> In the LOAD script, you can choose any directory path. Verify the folders have been created in HDFS Files View.</p>
</blockquote>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/load_truck_events_data.png" alt="load_truck_events_data" /></p>

<h3 id="step-5-save-and-execute-the-script-">Step 5: Save and Execute the Script <a id="step-5-save-and-execute-the-script"></a></h3>

<p>Click the <code class="highlighter-rouge">Save</code> button to save your changes to the script. Click <code class="highlighter-rouge">Execute</code> to run the script. This action creates one or more MapReduce jobs. After a moment, the script starts and the page changes. Now, you have the opportunity to Kill the job in case you want to stop the job.</p>

<p>Next to the <code class="highlighter-rouge">Kill job button</code> is a <code class="highlighter-rouge">progress bar</code> with a text field above that shows the <code class="highlighter-rouge">job’s status</code>.</p>

<p>When the job completes, check the results in the green box. You can also download results to your system by clicking the download icon. Notice truck_events does not have a schema because we did not define one when loading the data into relation truck_events.</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/save_execute_script_truck_events.png" alt="save_execute_script_truck_events" /></p>

<h3 id="step-6-define-a-relation-with-a-schema-">Step 6: Define a Relation with a Schema <a id="step-6-define-a-relation-with-a-schema"></a></h3>

<p>Let’s use the above code but this time with a schema. Modify line 1 of your script and add the following <code class="highlighter-rouge">AS</code> clause to define a schema for the truck events data. The complete code will be:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>truck_events = LOAD '/user/maria_dev/truck_event_text_partition.csv' USING PigStorage(',')
AS (driverId:int, truckId:int, eventTime:chararray,                 
eventType:chararray, longitude:double, latitude:double,
eventKey:chararray, correlationId:long, driverName:chararray,
routeId:long,routeName:chararray,eventDate:chararray);
DESCRIBE truck_events;
</code></pre>
</div>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/load_truck_events_data_schema.png" alt="load_truck_events_data_schema" /></p>

<p>Save and execute the script again. This time you should see the schema for the truck_events relation:</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/save_execute_script_truck_events_schema.png" alt="save_execute_script_truck_events_schema" /></p>

<h3 id="step-7-define-a-new-relation-from-an-existing-relation-">Step 7: Define a new relation from an existing relation <a id="step-7-define-a-new-relation-from-an-existing-relation"></a></h3>

<p>You can define a new relation based on an existing one. For example, define the following truck_events_subset relation, which is a collection of 100 entries (arbitrarily selected) from the truck_events relation.
Add the following line to the end of your code:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>truck_events_subset = LIMIT truck_events 100;
DESCRIBE truck_events_subset;
</code></pre>
</div>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/load_truck_events_data_subset.png" alt="load_truck_events_data_subset" /></p>

<p>Save and execute the code. Notice <code class="highlighter-rouge">truck_events_subset</code> has the same schema as <code class="highlighter-rouge">truck_events</code>, because  <code class="highlighter-rouge">truck_events_subset</code> is a subset of <code class="highlighter-rouge">truck_events</code> relation.</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/save_execute_script_truck_events_subset.png" alt="save_execute_script_truck_events_subset" /></p>

<h3 id="step-8-view-the-data-">Step 8: View the Data <a id="step-8-view-the-data"></a></h3>

<p>To view the data of a relation, use the <code class="highlighter-rouge">DUMP</code> command.
Add the following <code class="highlighter-rouge">DUMP</code> command to your Pig script, then save and execute it again:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>DUMP truck_events_subset;
</code></pre>
</div>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/dump_truck_events_subset.png" alt="dump_truck_events_subset" /></p>

<p>The command requires a MapReduce job to execute, so you will need to wait a minute or two for the job to complete. The output should be 100 entries from the contents of <code class="highlighter-rouge">truck_events_text_partition.csv</code> (and not necessarily the ones shown below, because again, entries are arbitrarily chosen):</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/result_truck_events_subset.png" alt="result_truck_events_subset" /></p>

<h3 id="step-9-select-specific-columns-from-a-relation-">Step 9: Select specific columns from a relation <a id="step-9-select-specific-columns-from-a-relation"></a></h3>

<p>Delete the <code class="highlighter-rouge">DESCRIBE truck_events</code>, <code class="highlighter-rouge">DESCRIBE truck_events_subset</code> and <code class="highlighter-rouge">DUMP truck_events_subset</code> commands from your Pig script; you will no longer need those.
One of the key uses of Pig is data transformation. You can define a new relation based on the fields of an existing relation using the <code class="highlighter-rouge">FOREACH</code> command. Define a new relation <code class="highlighter-rouge">specific_columns</code>, which will contain only the <code class="highlighter-rouge">driverId</code>, <code class="highlighter-rouge">eventTime</code> and <code class="highlighter-rouge">eventType</code> from relation <code class="highlighter-rouge">truck_events_subset</code>.
Now the completed code is:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>truck_events = LOAD '/user/maria_dev/truck_event_text_partition.csv' USING PigStorage(',')
AS (driverId:int, truckId:int, eventTime:chararray,                 
eventType:chararray, longitude:double, latitude:double,
eventKey:chararray, correlationId:long, driverName:chararray,
routeId:long,routeName:chararray,eventDate:chararray);  
truck_events_subset = LIMIT  truck_events 100;
specific_columns = FOREACH truck_events_subset GENERATE driverId, eventTime, eventType;
DESCRIBE specific_columns;
</code></pre>
</div>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/load_truck_events_data_subset_specific.png" alt="load_truck_events_data_subset_specific" /></p>

<p>Save and execute the script and your output will look like the following:</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/save_execute_script_truck_events_specific.png" alt="save_execute_script_truck_events_specific" /></p>

<h3 id="step-10-store-relationship-data-into-a-hdfs-file-">Step 10: Store relationship data into a HDFS File <a id="step-10-store-relationship-data-into-a-hdfs-file"></a></h3>

<p>In this step, you will use the <code class="highlighter-rouge">STORE</code> command to output a relation into a new file in HDFS. Enter the following command to output the <code class="highlighter-rouge">specific_columns</code> relation to a folder named <code class="highlighter-rouge">output/specific_columns</code>:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>STORE specific_columns INTO 'output/specific_columns' USING PigStorage(',');
</code></pre>
</div>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/store_truck_events_subset_specific.png" alt="store_truck_events_subset_specific" /></p>

<p>Save and Execute the script. Again, this requires a MapReduce job (just like the DUMP command), so you will need to wait a minute for the job to complete.</p>

<p>Once the job is finished, go to <code class="highlighter-rouge">HDFS Files view</code> and look for a newly created folder called <code class="highlighter-rouge">“output”</code> under <code class="highlighter-rouge">/user/maria_dev</code>:</p>

<blockquote>
  <p><strong>Note:</strong> If you didn’t use the default path above, then the new folder will exist in the path you created.</p>
</blockquote>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/navigate_to_output_directory.png" alt="navigate_to_output_directory" /></p>

<p>Click on <code class="highlighter-rouge">“output”</code> folder. You will find a subfolder named <code class="highlighter-rouge">“specific_columns”</code>.</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/navigate_to_specific_columns_directory.png" alt="navigate_to_specific_columns_directory" /></p>

<p>Click on <code class="highlighter-rouge">“specific_columns”</code> folder. You will see an output file called <code class="highlighter-rouge">“part-r-00000”</code>:</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/navigate_to_part_r_file.png" alt="navigate_to_part_r_file" /></p>

<p>Click on the file <code class="highlighter-rouge">“part-r-00000”</code> and then click on <code class="highlighter-rouge">Open</code> :</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/file_preview.png" alt="file_preview" /></p>

<h3 id="step-11-perform-a-join-between-2-relations-">Step 11: Perform a join between 2 relations <a id="step-11-perform-a-join-between-2-relations"></a></h3>

<p>In this step, you will perform a <code class="highlighter-rouge">join</code> on two driver statistics data sets: <code class="highlighter-rouge">truck_event_text_partition.csv</code> and the <code class="highlighter-rouge">driver.csv</code> files. Drivers.csv has all the details for the driver like driverId, name, ssn, location, etc.</p>

<p>You have already defined a relation for the events named truck_events. Create a new Pig script named <code class="highlighter-rouge">“Pig-Join”</code>. Then define a new relation named <code class="highlighter-rouge">drivers</code> then join truck_events and drivers by <code class="highlighter-rouge">driverId</code> and describe the schema of the new relation <code class="highlighter-rouge">join_data</code>.
The completed code will be:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>truck_events = LOAD '/user/maria_dev/truck_event_text_partition.csv' USING PigStorage(',')
AS (driverId:int, truckId:int, eventTime:chararray,                 
eventType:chararray, longitude:double, latitude:double,
eventKey:chararray, correlationId:long, driverName:chararray,
routeId:long,routeName:chararray,eventDate:chararray);
drivers =  LOAD '/user/maria_dev/drivers.csv' USING PigStorage(',')
AS (driverId:int, name:chararray, ssn:chararray,                 
location:chararray, certified:chararray, wage_plan:chararray);
join_data = JOIN  truck_events BY (driverId), drivers BY (driverId);
DESCRIBE join_data;
</code></pre>
</div>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/join_two_datasets.png" alt="join_two_datasets" /></p>

<p>Save the script and execute it. Notice <code class="highlighter-rouge">join_data</code> contains all the fields of both <code class="highlighter-rouge">truck_events</code> and <code class="highlighter-rouge">drivers</code>.</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/result_join_data.png" alt="result_join_data" /></p>

<p>Scroll right in Results section to view other attributes, or simply click <code class="highlighter-rouge">Download</code> button. Open that file and you will something like this:</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/result_join_data_download.png" alt="result_join_data_download" /></p>

<h3 id="step-12-sort-the-data-using-order-by-">Step 12: Sort the data using “ORDER BY” <a id="step-12-sort-the-data-using-order-by"></a></h3>

<p>Use the <code class="highlighter-rouge">ORDER BY</code> command to sort a relation by one or more of its fields. Create a new Pig script named <code class="highlighter-rouge">“Pig-Sort”</code> and enter the following commands to sort the drivers data by name then date in ascending order:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>drivers =  LOAD '/user/maria_dev/drivers.csv' USING PigStorage(',')
AS (driverId:int, name:chararray, ssn:chararray,                 
location:chararray, certified:chararray, wage_plan:chararray);
ordered_data = ORDER drivers BY name asc;
DUMP ordered_data;
</code></pre>
</div>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/sort_drivers_data.png" alt="sort_drivers_data" /></p>

<p>Save and execute the script. Your output should be sorted as shown here:</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/result_sort_drivers_data.png" alt="result_sort_drivers_data" /></p>

<h3 id="step-13-filter-and-group-the-data-using-group-by-">Step 13: Filter and Group the data using “GROUP BY” <a id="step-13-filter-and-group-the-data-using-group-by"></a></h3>

<p>The <code class="highlighter-rouge">GROUP</code> command allows you to group a relation by one of its fields. Create a new Pig script named <code class="highlighter-rouge">“Pig-Group”</code>. Then, enter the following commands, which group the <code class="highlighter-rouge">truck_events</code> relation by the <code class="highlighter-rouge">driverId</code> for the <code class="highlighter-rouge">eventType</code> which are not ‘Normal’.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>truck_events = LOAD '/user/maria_dev/truck_event_text_partition.csv' USING PigStorage(',')
AS (driverId:int, truckId:int, eventTime:chararray,                 
eventType:chararray, longitude:double, latitude:double,
eventKey:chararray, correlationId:long, driverName:chararray,
routeId:long,routeName:chararray,eventDate:chararray);
filtered_events = FILTER truck_events BY NOT (eventType MATCHES 'Normal');
grouped_events = GROUP filtered_events BY driverId;
DESCRIBE grouped_events;
DUMP grouped_events;
</code></pre>
</div>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/filter_group_datasets.png" alt="filter_group_datasets" /></p>

<p>Save and execute the script. Notice that the data for eventType which are not Normal is grouped together for each driverId.</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/result_group_data.png" alt="result_group_data" /></p>

<p>Scroll right to view all non-Normal events grouped under each driverId. You can also download the results file by clicking Download button.</p>

<p><img src="/assets/how-to-use-basic-pig-commands-hdp2.5/result_group_data_download.png" alt="result_group_data_download" /></p>

<p>Congratulations! You have successfully completed the tutorial and well on your way to pigging on Big Data.</p>

<h2 id="further-reading-">Further Reading <a id="further-reading"></a></h2>
<ul>
  <li><a href="http://hortonworks.com/hadoop-tutorial/how-to-process-data-with-apache-pig/">Apache Pig</a></li>
  <li><a href="https://pig.apache.org/">Welcome to Apache Pig!</a></li>
  <li><a href="https://pig.apache.org/docs/r0.12.0/basic.html#store">Pig Latin Basics</a></li>
  <li><a href="http://www.amazon.com/Programming-Pig-Alan-Gates/dp/1449302645">Programming Pig</a></li>
</ul>

</div>

<div id="tutorial-footer">
  <hr>
  <h2>Tutorial Q&amp;A and Reporting Issues</h2>
  <p>If you need help or have questions with this tutorial, please first check HCC for existing Answers to questions on this tutorial using the Find Answers button.  If you don't find your answer you can post a new HCC question for this tutorial using the Ask Questions button.</p>
  <p><a class="btn" href="https://community.hortonworks.com/topics/tutorial-140.html" role="button">Find Answers</a> <a class="btn pull-right" href="https://community.hortonworks.com/questions/ask.html?space=81&topics=tutorial-140&topics=hdp-2.5.0" role="button">Ask Questions</a></p>
  <p>Tutorial Name: <strong>How to Use Basic Pig Command</strong></p>
  <p>HCC Tutorial Tag:<strong> tutorial-140</strong> and <strong>hdp-2.5.0</strong></p>
  <p>If the tutorial has multiple labs please indicate which lab your question corresponds to. Please provide any feedback related to that lab.</p>
  <p>All Hortonworks, partner and community tutorials are posted in the Hortonworks github and can be contributed via the <a href="https://github.com/hortonworks/tutorials/wiki">Hortonworks Tutorial Contribution Guide</a>.  If you are certain there is an issue or bug with the tutorial, please <a href="https://github.com/hortonworks/tutorials/wiki#issues-with-tutorials">create an issue</a> on the repository and we will do our best to resolve it!</p>
</div>
